/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateMovementArgs } from "./CreateMovementArgs";
import { UpdateMovementArgs } from "./UpdateMovementArgs";
import { DeleteMovementArgs } from "./DeleteMovementArgs";
import { MovementCountArgs } from "./MovementCountArgs";
import { MovementFindManyArgs } from "./MovementFindManyArgs";
import { MovementFindUniqueArgs } from "./MovementFindUniqueArgs";
import { Movement } from "./Movement";
import { Product } from "../../product/base/Product";
import { MovementService } from "../movement.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Movement)
export class MovementResolverBase {
  constructor(
    protected readonly service: MovementService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Movement",
    action: "read",
    possession: "any",
  })
  async _movementsMeta(
    @graphql.Args() args: MovementCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Movement])
  @nestAccessControl.UseRoles({
    resource: "Movement",
    action: "read",
    possession: "any",
  })
  async movements(
    @graphql.Args() args: MovementFindManyArgs
  ): Promise<Movement[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Movement, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Movement",
    action: "read",
    possession: "own",
  })
  async movement(
    @graphql.Args() args: MovementFindUniqueArgs
  ): Promise<Movement | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Movement)
  @nestAccessControl.UseRoles({
    resource: "Movement",
    action: "create",
    possession: "any",
  })
  async createMovement(
    @graphql.Args() args: CreateMovementArgs
  ): Promise<Movement> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        productId: {
          connect: args.data.productId,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Movement)
  @nestAccessControl.UseRoles({
    resource: "Movement",
    action: "update",
    possession: "any",
  })
  async updateMovement(
    @graphql.Args() args: UpdateMovementArgs
  ): Promise<Movement | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          productId: {
            connect: args.data.productId,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Movement)
  @nestAccessControl.UseRoles({
    resource: "Movement",
    action: "delete",
    possession: "any",
  })
  async deleteMovement(
    @graphql.Args() args: DeleteMovementArgs
  ): Promise<Movement | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Product, {
    nullable: true,
    name: "productId",
  })
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "read",
    possession: "any",
  })
  async resolveFieldProductId(
    @graphql.Parent() parent: Movement
  ): Promise<Product | null> {
    const result = await this.service.getProductId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
